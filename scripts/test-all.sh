#!/bin/bash

# テスト実行スクリプト
echo "🧪 テストを実行中..."

# test.xlsxファイルの存在確認
if [ ! -f "test.xlsx" ]; then
    echo "⚠️  test.xlsxファイルが見つかりません。作成中..."
    node -e "
    const XLSX = require('xlsx');
    
    // テスト用の日報データ
    const dailyData = [
      ['日付', '業者名', '報告者名', '在籍', '雇', '工事番号', '小区画', '小区分', '規内', '規外', '計'],
      ['20250115', '㈲三和工業', '田中太郎', 5, '正社員', 'S6290', 'B12P', '211', 8.0, 1.5, 9.5],
      ['20250116', '㈲三和工業', '佐藤花子', 3, '正社員', 'S6290', 'B12P', '212', 7.5, 0.5, 8.0],
      ['20250117', '㈲三和工業', '鈴木一郎', 4, '正社員', 'S6291', 'H5P', '25K', 8.0, 2.0, 10.0],
      ['20250118', '㈲三和工業', '高橋花子', 2, '正社員', 'S6291', 'H5P', '25K', 7.0, 1.0, 8.0],
      ['20250119', '㈲三和工業', '山田太郎', 6, '正社員', 'S6292', 'C8P', '211', 8.5, 1.5, 10.0],
    ];
    
    // テスト用のコードデータ
    const codeData = [
      ['大区分', '大区分名称', '小区分', '小区分名称', '備考'],
      ['110', '組立', '211', '配材作業', '材料の準備作業'],
      ['110', '組立', '212', '組立作業', '部品の組み立て'],
      ['120', '配管', '25K', '配管作業', '配管の設置作業'],
      ['130', '電気', '311', '電気配線', '電気配線作業'],
      ['140', '塗装', '411', '下地処理', '塗装前の下地処理'],
    ];
    
    // ワークブックを作成
    const wb = XLSX.utils.book_new();
    
    // 日報データシートを追加
    const ws1 = XLSX.utils.aoa_to_sheet(dailyData);
    XLSX.utils.book_append_sheet(wb, ws1, 'データ(日報)');
    
    // コードシートを追加
    const ws2 = XLSX.utils.aoa_to_sheet(codeData);
    XLSX.utils.book_append_sheet(wb, ws2, 'コード');
    
    // ファイルを保存
    XLSX.writeFile(wb, 'test.xlsx');
    console.log('test.xlsxファイルを作成しました');
    "
fi

# 依存関係のインストール
echo "📦 依存関係をインストール中..."
npm ci

# リンターの実行
echo "🔍 リンターを実行中..."
npm run lint

# 型チェックの実行
echo "📝 型チェックを実行中..."
npx tsc --noEmit

# テストの実行
echo "🧪 ユニットテストを実行中..."
npm run test:run

# ビルドの実行
echo "🏗️ ビルドを実行中..."
npm run build

echo "✅ すべてのテストが完了しました！"
